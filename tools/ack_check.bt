#!/usr/bin/env bpftrace
#

#define KBUILD_MODNAME "bpftrace"

#include <linux/skbuff.h>
#include <linux/netdevice.h>
#include <linux/tcp.h>
#include <net/inet_connection_sock.h>

/*
kprobe:__tcp_ack_snd_check
{
    $sk = (struct sock *)arg0;
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;
    $dport = ($dport >> 8) | (($dport << 8) & 0x00ff00);
    if ($dport == 12345 || $lport == 12345) {
        printf("CHK: Thresh=%d, mss=%d, diff=%d, quickack=%d\n",
            ((struct inet_connection_sock *)arg0)->icsk_ack.calc_thresh,
            ((struct inet_connection_sock *)arg0)->icsk_ack.rcv_mss,
            ((struct tcp_sock *)arg0)->rcv_nxt - ((struct tcp_sock *)$sk)->rcv_wup,
            ((struct inet_connection_sock *)arg0)->icsk_ack.quick
            );
    }
}
*/

BEGIN
{
    @cnt = 1;
    @rcv_mss = 0;
    printf("----------------------------------------------\n");
}

kprobe:tcp_event_data_recv,
//kprobe:tcp_send_dupack,
//kprobe:tcp_recvmsg,
//kprobe:tcp_read_sock,
//kprobe:__tcp_ack_snd_check,
kprobe:tcp_send_ack
{
    $sk = (struct sock *)arg0;
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;
    $dport = ($dport >> 8) | (($dport << 8) & 0x00ff00);
    if ($dport == 12345 || $lport == 12345) {
        @[probe] = count();
        $loc_rcv_mss = ((struct inet_connection_sock *)arg0)->icsk_ack.rcv_mss;
        if (@cnt > 0) {
            printf("THRESH=%d\n", ((struct inet_connection_sock *)arg0)->icsk_ack.calc_thresh);
            @cnt--;
        }
        if ($loc_rcv_mss != @rcv_mss) {
            @rcv_mss = $loc_rcv_mss;
            printf("updated RCV_MSS=%d\n", @rcv_mss);
        }
        /*
        $diff = ((struct tcp_sock *)arg0)->rcv_nxt - ((struct tcp_sock *)arg0)->rcv_wup;
        printf("nxt=%u, wup=%u diff=%u\n",
            ((struct tcp_sock *)arg0)->rcv_nxt,
            ((struct tcp_sock *)arg0)->rcv_wup, $diff);
        */
    }
}

/*
kprobe:tcp_fin,
kprobe:tcp_send_dupack,
kprobe:__tcp_ack_snd_check,
kprobe:tcp_compressed_ack_kick,
kprobe:tcp_cleanup_rbuf,
kprobe:tcp_delack_timer_handler,
kprobe:tcp_send_delayed_ack
{
    $sk = (struct sock *)arg0;
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;
    $dport = ($dport >> 8) | (($dport << 8) & 0x00ff00);
    if ($dport == 12345 || $lport == 12345) {
        @funhit[tid] = 1;
    }
}

kretprobe:tcp_fin,
kretprobe:tcp_send_dupack,
kretprobe:__tcp_ack_snd_check,
kretprobe:tcp_compressed_ack_kick,
kretprobe:tcp_cleanup_rbuf,
kretprobe:tcp_delack_timer_handler,
kretprobe:tcp_send_delayed_ack
/@funhit[tid] == 1/
{
    delete(@funhit[tid]);
    if (@send_ack_flag[tid] == 1) {
        @send_ack_cnt[probe]++;
        @send_ack_flag[tid] = 0;
    }
}

kprobe:tcp_send_ack /@funhit[tid]/
{
    @send_ack_flag[tid] = 1;
}
*/

END
{
    clear(@rcv_mss);
    clear(@cnt);
//  clear(@send_ack_flag);
}
